import os, hmac, hashlib, secrets, asyncio, aiosqlite
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, PreCheckoutQuery, LabeledPrice, CallbackQuery
from aiogram.enums.parse_mode import ParseMode
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.default import DefaultBotProperties

# ==== CONFIG ====
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("BOT_TOKEN is not set")

# –í—Ä–µ–º–µ–Ω–Ω–∞—è –ë–î –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (Render free). –ï—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–∏—à—å –¥–∏—Å–∫ -> –∑–∞–¥–∞–π DB_PATH=/data/bank.sqlite –≤ Environment.
DB_PATH = os.getenv("DB_PATH", "/tmp/bank.sqlite")

MIN_BET, MAX_BET = 100, 5000
MULT_SIDE = 1.75
MULT_EDGE = 8.0
P_HEADS = 0.495       # 49.5%
P_EDGE  = 0.010       # 1%  (tails = 0.495)

ADMIN_ID = 634522146  # <-- –ø–æ—Å—Ç–∞–≤—å —Å–≤–æ–π Telegram user_id –¥–ª—è /give

bot = Bot(TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# in-memory –≤—ã–±–æ—Ä —Å—Ç–æ—Ä–æ–Ω—ã
pending_choice = {}  # user_id -> 'heads'|'tails'|'edge'


# ==== DB ====
async def db_init():
    os.makedirs(os.path.dirname(DB_PATH), exist_ok=True)
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""CREATE TABLE IF NOT EXISTS users(
            user_id INTEGER PRIMARY KEY,
            balance INTEGER NOT NULL DEFAULT 0
        )""")
        await db.execute("""CREATE TABLE IF NOT EXISTS bets(
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER, side TEXT, stake INTEGER,
            server_seed TEXT, client_seed TEXT, nonce INTEGER,
            commit_hash TEXT, outcome TEXT, payout INTEGER,
            ts DATETIME DEFAULT CURRENT_TIMESTAMP
        )""")
        # –¥–µ–ø–æ–∑–∏—Ç—ã Stars (–¥–ª—è –∞–≤—Ç–æ–≤–æ—Ä–æ—Ç–∞ —á–µ—Ä–µ–∑ refund)
        await db.execute("""CREATE TABLE IF NOT EXISTS deposits(
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            charge_id TEXT,
            amount INTEGER,
            refunded INTEGER NOT NULL DEFAULT 0,
            ts DATETIME DEFAULT CURRENT_TIMESTAMP
        )""")
        # –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ —Å–≤–µ—Ä—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤
        await db.execute("""CREATE TABLE IF NOT EXISTS withdrawals(
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            amount INTEGER,
            auto_refunded INTEGER,
            status TEXT DEFAULT 'pending',
            ts DATETIME DEFAULT CURRENT_TIMESTAMP
        )""")
        await db.commit()


async def get_balance(uid:int)->int:
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT balance FROM users WHERE user_id=?", (uid,))
        row = await cur.fetchone()
        if not row:
            await db.execute("INSERT INTO users(user_id,balance) VALUES(?,0)", (uid,))
            await db.commit()
            return 0
        return row[0]

async def add_balance(uid:int, delta:int):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("INSERT INTO users(user_id,balance) VALUES(?,0) ON CONFLICT(user_id) DO NOTHING", (uid,))
        await db.execute("UPDATE users SET balance = balance + ? WHERE user_id=?", (delta, uid))
        await db.commit()


# ==== Provably-fair RNG ====
def make_commit(server_seed:str)->str:
    import hashlib as _hl
    return _hl.sha256(server_seed.encode()).hexdigest()

def rng_roll(server_seed:str, client_seed:str, nonce:int):
    """
    HMAC-SHA256 -> x in [0,1)
      x < 0.495 -> heads
      0.495 <= x < 0.505 -> edge
      else -> tails
    """
    import hmac, hashlib
    msg = f"{client_seed}:{nonce}".encode()
    digest = hmac.new(server_seed.encode(), msg, hashlib.sha256).digest()
    n = int.from_bytes(digest[:8], "big")
    x = n / 2**64
    if x < P_HEADS: return ("heads", x)
    if x < P_HEADS + P_EDGE: return ("edge", x)
    return ("tails", x)

def payout_for(outcome:str, chosen:str, stake:int)->int:
    if outcome == "edge":
        return int(round(stake * MULT_EDGE))
    if outcome == chosen:
        return int(round(stake * MULT_SIDE))
    return 0


# ==== UI ====
def main_menu_kb(balance:int):
    kb = InlineKeyboardBuilder()
    kb.button(text="–û—Ä—ë–ª",  callback_data="side:heads")
    kb.button(text="–†–µ—à–∫–∞", callback_data="side:tails")
    kb.button(text="–†–µ–±—Ä–æ", callback_data="side:edge")  # NEW
    kb.button(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å (1000 XTR)", callback_data="dep:1000")
    kb.button(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å (5000 XTR)", callback_data="dep:5000")
    kb.button(text=f"–í—ã–≤–µ—Å—Ç–∏ ({balance} XTR)", callback_data="withdraw")  # NEW
    kb.adjust(3,2,1)
    return kb.as_markup()


@dp.message(Command("start","help"))
async def start(m: Message):
    bal = await get_balance(m.from_user.id)
    await m.answer(
        "ü™ô <b>–ú–æ–Ω–µ—Ç–∫–∞</b>\n"
        f"–ë–∞–ª–∞–Ω—Å: <b>{bal}</b> XTR\n"
        "–í—ã–ø–ª–∞—Ç—ã: 1.75√ó –∑–∞ —Å—Ç–æ—Ä–æ–Ω—É, 8√ó –∑–∞ —Ä–µ–±—Ä–æ.\n"
        f"–°—Ç–∞–≤–∫–∞: {MIN_BET}-{MAX_BET} XTR.\n\n"
        "1) –í—ã–±–µ—Ä–∏ —Å—Ç–æ—Ä–æ–Ω—É (–û—Ä—ë–ª/–†–µ—à–∫–∞/–†–µ–±—Ä–æ).\n"
        "2) –û—Ç–ø—Ä–∞–≤—å —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ —á–∏—Å–ª–æ–º.",
        reply_markup=main_menu_kb(bal)
    )


@dp.callback_query(F.data.startswith("side:"))
async def choose_side(cq: CallbackQuery):
    side = cq.data.split(":")[1]  # heads|tails|edge
    pending_choice[cq.from_user.id] = side
    await cq.answer("–°—Ç–æ—Ä–æ–Ω–∞ –≤—ã–±—Ä–∞–Ω–∞")
    await cq.message.edit_text(
        f"–í—ã–±–æ—Ä: <b>{'–û—Ä—ë–ª' if side=='heads' else ('–†–µ—à–∫–∞' if side=='tails' else '–†–µ–±—Ä–æ')}</b>\n"
        f"–í–≤–µ–¥–∏ —Å—É–º–º—É ({MIN_BET}-{MAX_BET} XTR).",
        reply_markup=main_menu_kb(await get_balance(cq.from_user.id))
    )


@dp.callback_query(F.data == "withdraw")
async def ask_withdraw(cq: CallbackQuery):
    bal = await get_balance(cq.from_user.id)
    await cq.answer()
    await cq.message.answer(
        f"üí∏ –ù–∞ –±–∞–ª–∞–Ω—Å–µ: <b>{bal}</b> XTR\n"
        "–û—Ç–ø—Ä–∞–≤—å —Å—É–º–º—É –∫–æ–º–∞–Ω–¥–æ–π: <code>/withdraw 1000</code>\n"
        "–ê–≤—Ç–æ–≤—ã–ø–ª–∞—Ç–∞ –¥–µ–ª–∞–µ—Ç—Å—è —Ä–µ—Ñ–∞–Ω–¥–æ–º —Ç–≤–æ–∏—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤ Stars.\n"
        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –≤—ã–≤–µ—Å—Ç–∏ –±–æ–ª—å—à–µ, —á–µ–º –≤–Ω–µ—Å—ë—à—å ‚Äî —Ä–∞–∑–Ω–∏—Ü–∞ —É–π–¥—ë—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ —Ä—É—á–Ω–æ–π –≤—ã–≤–æ–¥."
    )


@dp.callback_query(F.data.startswith("dep:"))
async def quick_deposit(cq: CallbackQuery):
    amount = int(cq.data.split(":")[1])
    await cq.answer()
    await bot.send_invoice(
        chat_id=cq.message.chat.id,
        title="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞",
        description=f"–ó–∞—á–∏—Å–ª–µ–Ω–∏–µ {amount} XTR",
        payload=f"dep:{amount}",
        provider_token="",      # Stars
        currency="XTR",
        prices=[LabeledPrice(label="Stars", amount=amount)]
    )


@dp.message(F.text.regexp(r"^\d+$"))
async def place_bet(m: Message):
    stake = int(m.text)
    uid = m.from_user.id
    if not (MIN_BET <= stake <= MAX_BET):
        await m.reply(f"–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –î–æ–ø—É—Å—Ç–∏–º–æ {MIN_BET}‚Äì{MAX_BET} XTR."); return
    side = pending_choice.get(uid)
    if side not in ("heads","tails","edge"):
        await m.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏: –û—Ä—ë–ª / –†–µ—à–∫–∞ / –†–µ–±—Ä–æ."); return
    bal = await get_balance(uid)
    if bal < stake:
        await m.reply(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ ({bal} XTR). –ù–∞–∂–º–∏ ¬´–ü–æ–ø–æ–ª–Ω–∏—Ç—å¬ª."); return

    # commit-reveal
    server_seed = secrets.token_hex(32)
    client_seed = secrets.token_hex(16)
    nonce = 1
    commit = make_commit(server_seed)

    # —Å–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
    await add_balance(uid, -stake)

    outcome, x = rng_roll(server_seed, client_seed, nonce)
    prize = payout_for(outcome, side, stake)
    if prize:
        await add_balance(uid, prize)

    # –ª–æ–≥ –±–µ—Ç–∞
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""INSERT INTO bets(user_id, side, stake, server_seed, client_seed, nonce, commit_hash, outcome, payout)
                            VALUES(?,?,?,?,?,?,?,?,?)""",
                         (uid, side, stake, server_seed, client_seed, nonce, commit, outcome, prize))
        await db.commit()

    bal2 = await get_balance(uid)
    name = {"heads":"–û—Ä—ë–ª","tails":"–†–µ—à–∫–∞","edge":"–†–µ–±—Ä–æ"}[outcome]
    await m.answer(
        f"üé≤ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> {name}\n"
        f"–°—Ç–∞–≤–∫–∞: {stake} XTR ‚Üí –í—ã–ø–ª–∞—Ç–∞: <b>{prize}</b> XTR\n"
        f"–ë–∞–ª–∞–Ω—Å: <b>{bal2}</b> XTR\n\n"
        f"<b>–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏</b>\n"
        f"commit: <code>{commit}</code>\n"
        f"server_seed: <code>{server_seed}</code>\n"
        f"client_seed: <code>{client_seed}</code>\n"
        f"nonce: <code>{nonce}</code>\n"
        f"x<0.495‚Üí–û—Ä—ë–ª, 0.495‚â§x<0.505‚Üí–†–µ–±—Ä–æ, –∏–Ω–∞—á–µ‚Üí–†–µ—à–∫–∞."
    )


# ==== Stars payments ====
@dp.pre_checkout_query()
async def on_pre_checkout(q: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(q.id, ok=True)

@dp.message(F.successful_payment)
async def on_successful_payment(m: Message):
    sp = m.successful_payment
    uid = m.from_user.id
    amount = sp.total_amount  # XTR
    await add_balance(uid, amount)

    # –ª–æ–≥ –¥–µ–ø–æ–∑–∏—Ç–∞ (–¥–ª—è –∞–≤—Ç–æ–≤–æ—Ä–æ—Ç–∞)
    charge_id = getattr(sp, "telegram_payment_charge_id", None)
    if charge_id:
        async with aiosqlite.connect(DB_PATH) as db:
            await db.execute("INSERT INTO deposits(user_id, charge_id, amount, refunded) VALUES(?,?,?,0)",
                             (uid, charge_id, amount))
            await db.commit()

    bal = await get_balance(uid)
    await m.answer(f"‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: +{amount} XTR\n–ë–∞–ª–∞–Ω—Å: <b>{bal}</b> XTR",
                   reply_markup=main_menu_kb(bal))


# ==== Withdraw ====
@dp.message(Command("withdraw"))
async def withdraw_cmd(m: Message):
    uid = m.from_user.id
    parts = m.text.strip().split(maxsplit=1)
    if len(parts) < 2 or not parts[1].isdigit():
        await m.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /withdraw 1000"); return
    amount = int(parts[1])
    bal = await get_balance(uid)
    if amount <= 0 or amount > bal:
        await m.reply(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ë–∞–ª–∞–Ω—Å: {bal} XTR"); return

    # —Å–∫–æ–ª—å–∫–æ –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –∞–≤—Ç–æ (–¥–µ–ø–æ–∑–∏—Ç—ã - —É–∂–µ refunded)
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT id, charge_id, amount, refunded FROM deposits WHERE user_id=? ORDER BY ts ASC", (uid,))
        rows = await cur.fetchall()

    to_refund = amount
    auto_refunded = 0

    for dep_id, charge_id, dep_amount, refunded in rows:
        left = dep_amount - refunded
        if left <= 0 or to_refund <= 0: 
            continue
        chunk = min(left, to_refund)

        # –ü—ã—Ç–∞–µ–º—Å—è —á–∞—Å—Ç–∏—á–Ω–æ —Ä–µ—Ñ–∞–Ω–¥–∏—Ç—å Stars (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ –≤–æ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–∞—Ö)
        try:
            # aiogram 3: snake_case –æ–±—ë—Ä—Ç–∫–∞
            await bot.refund_star_payment(user_id=uid, telegram_payment_charge_id=charge_id, amount=chunk)
            new_refunded = refunded + chunk
        except Exception:
            # fallback: –µ—Å–ª–∏ –Ω–µ –≤—ã—à–ª–æ —á–∞—Å—Ç–∏—á–Ω–æ ‚Äî –ø—Ä–æ–±—É–µ–º —Ü–µ–ª–∏–∫–æ–º
            if refunded == 0 and to_refund >= dep_amount:
                await bot.refund_star_payment(user_id=uid, telegram_payment_charge_id=charge_id)
                new_refunded = dep_amount
                chunk = dep_amount
            else:
                continue

        async with aiosqlite.connect(DB_PATH) as db:
            await db.execute("UPDATE deposits SET refunded=? WHERE id=?", (new_refunded, dep_id))
            await db.commit()

        to_refund -= chunk
        auto_refunded += chunk
        if to_refund <= 0:
            break

    if auto_refunded > 0:
        await add_balance(uid, -auto_refunded)

    rest = amount - auto_refunded
    if rest > 0:
        async with aiosqlite.connect(DB_PATH) as db:
            await db.execute("INSERT INTO withdrawals(user_id, amount, auto_refunded, status) VALUES(?,?,?,'pending')",
                             (uid, amount, auto_refunded))
            await db.commit()
        await m.reply(
            f"‚úÖ –ê–≤—Ç–æ–≤—ã–ø–ª–∞—Ç–∞ Stars: {auto_refunded} XTR.\n"
            f"üìù –û—Å—Ç–∞—Ç–æ–∫ {rest} XTR –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ —Ä—É—á–Ω–æ–π –≤—ã–≤–æ–¥."
        )
    else:
        await m.reply(f"‚úÖ –í—ã–ø–ª–∞—Ç–∞ Stars –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {auto_refunded} XTR.")


# ==== Admin test topup ====
@dp.message(Command("give"))
async def admin_give(m: Message):
    if m.from_user.id != ADMIN_ID:
        return
    try:
        amount = int(m.text.split(maxsplit=1)[1])
    except Exception:
        await m.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /give 10000"); return
    await add_balance(m.from_user.id, amount)
    bal = await get_balance(m.from_user.id)
    await m.reply(f"–ù–∞—á–∏—Å–ª–µ–Ω–æ {amount} XTR. –ë–∞–ª–∞–Ω—Å: {bal} XTR")


# ==== Run ====
async def main():
    await db_init()
    await dp.start_polling(bot)

# --- Render keep-alive (Web Service) ---
import threading
from flask import Flask
def keep_alive():
    app = Flask(__name__)
    @app.route("/")
    def home():
        return "Bot is running"
    threading.Thread(target=lambda: app.run(host="0.0.0.0", port=8080)).start()
keep_alive()
# --- end workaround ---

if __name__ == "__main__":
    asyncio.run(main())
