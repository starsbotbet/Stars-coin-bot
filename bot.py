import os
import asyncio
import random
import sqlite3
from contextlib import closing
from dataclasses import dataclass

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from flask import Flask
import threading

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN env var is not set")

DB_PATH = os.getenv("DB_PATH", "/data/bank.sqlite")

# ----- storage -----
def db_init():
    os.makedirs(os.path.dirname(DB_PATH), exist_ok=True)
    with closing(sqlite3.connect(DB_PATH)) as con:
        con.execute("""
        CREATE TABLE IF NOT EXISTS users(
            uid INTEGER PRIMARY KEY,
            balance INTEGER NOT NULL DEFAULT 0
        )
        """)
        con.execute("""
        CREATE TABLE IF NOT EXISTS bets(
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            uid INTEGER,
            side TEXT,
            stake INTEGER,
            outcome TEXT,
            prize INTEGER,
            ts DATETIME DEFAULT CURRENT_TIMESTAMP
        )
        """)
        con.commit()

def get_balance(uid: int) -> int:
    with closing(sqlite3.connect(DB_PATH)) as con:
        row = con.execute("SELECT balance FROM users WHERE uid=?", (uid,)).fetchone()
        return row[0] if row else 0

def ensure_user(uid: int):
    with closing(sqlite3.connect(DB_PATH)) as con:
        con.execute("INSERT OR IGNORE INTO users(uid,balance) VALUES(?,0)", (uid,))
        con.commit()

def add_balance(uid: int, amount: int):
    with closing(sqlite3.connect(DB_PATH)) as con:
        con.execute("INSERT OR IGNORE INTO users(uid,balance) VALUES(?,0)", (uid,))
        con.execute("UPDATE users SET balance = balance + ? WHERE uid=?", (amount, uid))
        con.commit()

def sub_balance(uid: int, amount: int) -> bool:
    with closing(sqlite3.connect(DB_PATH)) as con:
        row = con.execute("SELECT balance FROM users WHERE uid=?", (uid,)).fetchone()
        bal = row[0] if row else 0
        if bal < amount:
            return False
        con.execute("UPDATE users SET balance = balance - ? WHERE uid=?", (amount, uid))
        con.commit()
        return True

def save_bet(uid: int, side: str, stake: int, outcome: str, prize: int):
    with closing(sqlite3.connect(DB_PATH)) as con:
        con.execute(
            "INSERT INTO bets(uid,side,stake,outcome,prize) VALUES(?,?,?,?,?)",
            (uid, side, stake, outcome, prize)
        )
        con.commit()

# ----- game logic -----
SIDES = {"heads": "–û—Ä—ë–ª", "tails": "–†–µ—à–∫–∞", "edge": "–†–µ–±—Ä–æ"}
COEFFS = {"heads": 1.75, "tails": 1.75, "edge": 8.0}

@dataclass
class SpinResult:
    outcome: str
    prize: int

def spin(side: str, stake: int) -> SpinResult:
    # probabilities: heads 49.5%, tails 49.5%, edge 1%
    r = random.random()
    if r < 0.495:
        outcome = "heads"
    elif r < 0.495 + 0.495:
        outcome = "tails"
    else:
        outcome = "edge"
    prize = 0
    if side == outcome:
        prize = int(round(stake * COEFFS[side]))
    return SpinResult(outcome, prize)

# ----- ui helpers -----
def main_menu_kb(balance: int) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="–û—Ä—ë–ª", callback_data="choose:heads")
    kb.button(text="–†–µ—à–∫–∞", callback_data="choose:tails")
    kb.button(text="–†–µ–±—Ä–æ", callback_data="choose:edge")
    kb.adjust(3)
    kb.button(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å (+1000 —Ç–µ—Å—Ç)", callback_data="topup:1000")
    kb.button(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å (+5000 —Ç–µ—Å—Ç)", callback_data="topup:5000")
    kb.adjust(1)
    kb.button(text="–í—ã–≤–æ–¥ (–∑–≤—ë–∑–¥–∞–º–∏)", callback_data="withdraw")
    return kb.as_markup()

# ----- bot -----
bot = Bot(BOT_TOKEN)
dp = Dispatcher()

@dp.message(CommandStart())
async def cmd_start(m: Message):
    ensure_user(m.from_user.id)
    bal = get_balance(m.from_user.id)
    text = (
        "ü™ô <b>–ú–æ–Ω–µ—Ç–∫–∞</b>\n"
        f"–ë–∞–ª–∞–Ω—Å: <b>{bal}</b> XTR\n\n"
        "–ü—Ä–∞–≤–∏–ª–∞: –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã ‚Äî –û—Ä—ë–ª 1.75√ó, –†–µ—à–∫–∞ 1.75√ó, –†–µ–±—Ä–æ 8√ó.\n"
        "–°—Ç–∞–≤–∫–∞ –æ—Ç 100 –¥–æ 5000 XTR.\n\n"
        "1) –í—ã–±–µ—Ä–∏ —Å—Ç–æ—Ä–æ–Ω—É –∫–Ω–æ–ø–∫–æ–π.\n"
        "2) –ü—Ä–∏—à–ª–∏ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ —á–∏—Å–ª–æ–º."
    )
    await m.answer(text, reply_markup=main_menu_kb(bal))

@dp.callback_query(F.data.startswith("topup:"))
async def cb_topup(c: CallbackQuery):
    amount = int(c.data.split(":")[1])
    add_balance(c.from_user.id, amount)
    bal = get_balance(c.from_user.id)
    await c.message.answer(f"‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: +{amount} XTR\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{bal}</b> XTR",
                           reply_markup=main_menu_kb(bal))
    await c.answer()

@dp.callback_query(F.data.startswith("choose:"))
async def cb_choose(c: CallbackQuery):
    side = c.data.split(":")[1]
    name = SIDES.get(side, side)
    await c.message.answer(f"–¢—ã –≤—ã–±—Ä–∞–ª: <b>{name}</b>\n–ü—Ä–∏—à–ª–∏ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (100‚Äì5000).")
    # —Å–æ—Ö—Ä–∞–Ω–∏–º –≤—ã–±–æ—Ä –≤ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π "–ø–∞–º—è—Ç–∏" —á–µ—Ä–µ–∑ message id
    await bot.session.storage.set(f"side:{c.from_user.id}", side)  # type: ignore[attr-defined]
    await c.answer()

# –ø—Ä–æ—Å—Ç–æ–π key-value storage –Ω–∞ –æ—Å–Ω–æ–≤–µ bot.session (–≤ aiogram –µ–≥–æ –Ω–µ—Ç –∏–∑ –∫–æ—Ä–æ–±–∫–∏),
# –ø–æ—ç—Ç–æ–º—É –¥–µ–ª–∞–µ–º fallback —á–µ—Ä–µ–∑ in-memory dict
_memory = {}

async def _get(key: str):
    return _memory.get(key)

async def _set(key: str, value):
    _memory[key] = value

# –ø–æ–¥–º–µ–Ω–∞ set/get, –µ—Å–ª–∏ –≤—ã—à–µ storage –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
try:
    # –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —É –æ–±—ä–µ–∫—Ç–∞ bot.session.storage –º–µ—Ç–æ–¥—ã set/get
    getattr(bot.session, "storage")
    # –µ—Å–ª–∏ –≥–¥–µ-—Ç–æ —É–ø–∞–¥—ë—Ç ‚Äî –ø–µ—Ä–µ–π–¥—ë–º –Ω–∞ _memory
    bot.session.storage.set  # type: ignore[attr-defined]
    bot.session.storage.get  # type: ignore[attr-defined]
except Exception:
    async def patch_get(key): return _get(key)
    async def patch_set(key, value): return _set(key, value)
    bot.session = type("S", (), {"storage": type("T", (), {"get": patch_get, "set": patch_set})})()

@dp.message(F.text.regexp(r"^\d+$"))
async def handle_bet(m: Message):
    ensure_user(m.from_user.id)
    side = await bot.session.storage.get(f"side:{m.from_user.id}")  # type: ignore[attr-defined]
    if not side:
        await m.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å—Ç–æ—Ä–æ–Ω—É: –Ω–∞–∂–º–∏ ¬´–û—Ä—ë–ª¬ª, ¬´–†–µ—à–∫–∞¬ª –∏–ª–∏ ¬´–†–µ–±—Ä–æ¬ª.",
                       reply_markup=main_menu_kb(get_balance(m.from_user.id)))
        return

    stake = int(m.text)
    if stake < 100 or stake > 5000:
        await m.answer("–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 100 –¥–æ 5000 XTR.")
        return

    if not sub_balance(m.from_user.id, stake):
        await m.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø–æ–ª–Ω–∏ –±–∞–ª–∞–Ω—Å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.",
                       reply_markup=main_menu_kb(get_balance(m.from_user.id)))
        return

    res = spin(side, stake)
    prize = res.prize
    outcome_name = SIDES[res.outcome]

    if prize > 0:
        add_balance(m.from_user.id, prize)
        result_line = f"üéâ –ü–æ–±–µ–¥–∞! –í—ã–ø–∞–ª–æ: <b>{outcome_name}</b>. –í—ã–ø–ª–∞—Ç–∞: <b>{prize}</b> XTR"
    else:
        result_line = f"üôà –ü—Ä–æ–∏–≥—Ä—ã—à. –í—ã–ø–∞–ª–æ: <b>{outcome_name}</b>."

    save_bet(m.from_user.id, side, stake, res.outcome, prize)
    bal = get_balance(m.from_user.id)
    await m.answer(
        f"{result_line}\n–ë–∞–ª–∞–Ω—Å: <b>{bal}</b> XTR",
        reply_markup=main_menu_kb(bal)
    )

@dp.callback_query(F.data == "withdraw")
async def cb_withdraw(c: CallbackQuery):
    bal = get_balance(c.from_user.id)
    text = (
        "üí∏ <b>–í—ã–≤–æ–¥ –∑–≤—ë–∑–¥–∞–º–∏</b>\n\n"
        f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{bal}</b> XTR.\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚Äî –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç —Ç–µ–±–µ —Ñ–æ—Ä–º—É-–∑–∞—è–≤–∫—É. "
        "–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω –ø–µ—Ä–µ–≤–µ–¥—ë—Ç –∑–≤—ë–∑–¥—ã –≤—Ä—É—á–Ω—É—é."
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="withdraw_form")
    ]])
    await c.message.answer(text, reply_markup=kb)
    await c.answer()

@dp.callback_query(F.data == "withdraw_form")
async def cb_withdraw_form(c: CallbackQuery):
    bal = get_balance(c.from_user.id)
    if bal <= 0:
        await c.message.answer("–ù–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞.")
        await c.answer()
        return
    # —Ç—É—Ç –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É
    await c.message.answer(
        "‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞.\n"
        "–ê–¥–º–∏–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å —Ç–æ–±–æ–π –∏ –ø–µ—Ä–µ–≤–µ–¥—ë—Ç –∑–≤—ë–∑–¥—ã.\n"
        "–î–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏ @your_admin_username."
    )
    await c.answer()

async def main():
    db_init()
    await dp.start_polling(bot)

# ---- Flask keep-alive for Fly.io ----
def keep_alive():
    app = Flask(__name__)

    @app.route("/")
    def home():
        return "Bot is running"

    app.run(host="0.0.0.0", port=int(os.getenv("PORT", "8080")), debug=False)

if __name__ == "__main__":
    threading.Thread(target=keep_alive, daemon=True).start()
    asyncio.run(main())
